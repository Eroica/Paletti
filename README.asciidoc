= Paletti
:imagesdir: docs/images

Paletti is a small tool to _quantize_ the colors of an image.
This can be used to simplify the image visually or to extract certain key colors.

The quantization process usually extracts colors that are visually close to the original image, but it is not guaranteed to be exact.
It is based on a https://en.wikipedia.org/wiki/Median_cut[_Modified median cut quantization_] implemented by http://leptonica.org/:[Leptonica].

image::Paletti.gif[Screenshot of using Paletti]

You can increase/decrease the amount of colors by scrolling up/down or using the slider (the size is currently restricted to 3 to 32 colors).
The switch converts the image to grayscale.

Click on a color in the palette to copy its Hex code into the clipboard.
You can also export the simplified version or a screenshot of the color palette e.g. to paste it into a drawing program.
<<Shortcuts,Look at the list of shortcuts below.>>

You can download a version for Windows, an ELF binary (AppImage), and a pre-release for Android from the https://github.com/Eroica/Paletti/releases[Releases].
See also: https://docs.appimage.org/user-guide/faq.html[What is an AppImage?]

<<Development,Read more about each version below.>>

While I probably mostly use Paletti for myself, I develop it publicly in the hope that it is helpful for other people as well.
Nowadays, I mostly work as a 2D/3D artist on Windows.
This is why the Windows version currently gets the most development time.
You are welcome to raise bugs and feature requests here.

== Shortcuts

.Shortcuts
|===
|Action |JavaFX |GTK |Android

|Open an image
|`Ctrl+O`
|`Ctrl+O`
|

|Export current image
|`Ctrl+S`
|`Ctrl+S`
|

|Copy current image into clipboard
|`Ctrl+C`
|
|

|Export current color palette
|`Ctrl+E`
|
|

|Increase/decrease color palette size
|Mouse wheel up/down +
Keyboard `Up`/`Down`
|Keyboard `Up`/`Down`
|

|Toggle between black/white and colored segmentation
|`x`
|`x`
|

|Open Shortcuts window
|—
|`Ctrl+?` +
`Ctrl+F1`
|
|===

== Development

....
Paletti
├───android  ; Android version
├───docs     ; Website
├───gtk      ; GTK version written in Vala
├───javafx   ; JavaFX version written in Kotlin for Windows
└───lib      ; Simple C++ wrapper used by the javafx and android version
....

=== Windows

Paletti's Windows version is written in Kotlin with JavaFX.
It is themed to resemble the upcoming WinUI 3/Windows 11 style!

The project is built with Gradle.
Running Paletti requires Java, but I'm using `jpackage` to bundle the necessary JRE, so Paletti can be downloaded and ran without installing anything.

Being written in JavaFX, this version should theoretically run on GNU/Linux and macOS as well.
However, I haven't tested this and don't intend to work on this.
It is written for Windows; for GNU/Linux, please use the GTK version described below.

image::PalettiWindows-2.0.png[Screenshot of Paletti's JavaFX version]

=== ELF binary (AppImage)

This version is written in Vala using the Meson build system.
It should fit well into desktop environments using GTK, e.g. GNOME.

To build Paletti, you need Leptonica (next to Vala and GTK).
You can probably install it your distribution's package manager, e.g. `leptonica-devel`.
The library is often abbreviated as `lept`.

Create a `build` directory if it doesn't exist yet, then run `meson build`.
Inside `build/`, you can then run `ninja`.

The AppImage is generated by a simple Makefile inside `dist/`.

image::Paletti-2.0.png[Screenshot of Paletti's GTK version]

=== Android

The Android version is currently in development.
It is now more or less feature-identical to the desktop versions, and you can easily "`share`" the quantized image and color palette to other apps.

You need to build it from source to get the latest updates.

image::PalettiAndroid-beta.png[Screenshot of Paletti's Android version]

== License

Please see the `LICENSE` file in this repository.

Paletti uses Leptonica for processing images.
Leptonica's license:

....
/*====================================================================*
 -  Copyright (C) 2001 Leptonica.  All rights reserved.
 -
 -  Redistribution and use in source and binary forms, with or without
 -  modification, are permitted provided that the following conditions
 -  are met:
 -  1. Redistributions of source code must retain the above copyright
 -     notice, this list of conditions and the following disclaimer.
 -  2. Redistributions in binary form must reproduce the above
 -     copyright notice, this list of conditions and the following
 -     disclaimer in the documentation and/or other materials
 -     provided with the distribution.
 -
 -  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 -  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 -  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 -  A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL ANY
 -  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 -  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 -  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 -  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 -  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 -  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 -  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *====================================================================*/
....
